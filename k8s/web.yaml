apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  ports:
    - port: 3000
  type: ClusterIP
  selector:
    app: web
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: netnodse/robust-web
          ports:
            - containerPort: 3000
          resources: {}
          env:
            - name: REDIS_PASS
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_SERVER
              value: redis-master
            - name: REDIS_URL
              value: "redis://:$(REDIS_PASS)@$(REDIS_SERVER)"
            - name: SIGNED_COOKIE_KEYS
              valueFrom:
                secretKeyRef:
                  name: signed-cookie-keys
                  key: SIGNED_COOKIE_KEYS
            - name: NODE_ENV
              value: "production"
            - name: PGHOST
              value: postgresql-postgresql-ha-pgpool
            - name: PGUSER
              value: postgres
            - name: PGDATABASE
              value: robust-tjanst
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-postgresql-ha-postgresql
                  key: postgresql-password
            - name: DATABASE_URL
              value: "postgres://$(PGUSER):$(PGPASSWORD)@$(PGHOST)/$(PGDATABASE)"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  annotations:
    kubernetes.io/ingress.class: "public"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # this is too agressive. Better to use etag instead.
    #nginx.ingress.kubernetes.io/rewrite-target: /
    #nginx.ingress.kubernetes.io/proxy-body-size: 8m
    #nginx.ingress.kubernetes.io/proxy-buffering: "on"
    #nginx.ingress.kubernetes.io/configuration-snippet: |
    #  location ~* "^/sigil" {
    #    proxy_cache static-cache;
    #    proxy_cache_valid any 60m;
    #    proxy_cache_key "$host$request_uri";
    #    add_header X-Cache-Status $upstream_cache_status;
    #  }
spec:
  rules:
    - host: robust.netnod.se
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: web
                port:
                  number: 3000
  tls:
  - hosts:
    - robust.netnod.se
    secretName: robust-netnod-se-cert
